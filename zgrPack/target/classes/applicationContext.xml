<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans" 
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:context="http://www.springframework.org/schema/context" xmlns:util="http://www.springframework.org/schema/util"  
		xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:mvc="http://www.springframework.org/schema/mvc"
		
		xmlns:cache="http://www.springframework.org/schema/cache"
		xmlns:p="http://www.springframework.org/schema/p"
		
		xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		
		http://www.springframework.org/schema/cache 
        http://www.springframework.org/schema/cache/spring-cache-4.2.xsd"
		>

<!-- 自动扫描 Controller,Service组件-->  
<context:component-scan base-package="org.zgr.pack" /> 

<!-- 配置HandlerMapping(支持@RequestMapping,@ResponseBody,@ExceptionHanlder)     mvc标注扫描 -->
<mvc:annotation-driven/>

	<!-- 配置视图解析器viesResoler -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/"/>
		<property name="suffix" value=".jsp"/>
	</bean>


<!-- 利用dbcp创建连接池DataSource对象 -->
<bean id="dbcp" class="com.alibaba.druid.pool.DruidDataSource">
	<property name="username" value="root"></property>
	<property name="password" value="123456"></property>
	<property name="url" value="jdbc:mysql://192.168.0.170:3306/zgrPack?useUnicode=true&amp;characterEncoding=UTF-8"></property>
	<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
</bean>

<!-- 加载MyBatis主配置信息,创建SqlSessionFactory -->
<bean id="factory" class="org.mybatis.spring.SqlSessionFactoryBean">
	<!-- 连接参数 -->
	<property name="dataSource" ref="dbcp"></property>
	<!-- SQL定义文件 -->
	<property name="mapperLocations" value="classpath:mappers/*.xml"></property>
</bean>


<!-- 扫描Mapper接口生成实现 -->
<bean id="mapperscanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	<!-- 自动注入SqlSessionFactory -->
	<property name="sqlSessionFactory" ref="factory">
	</property>
	<!-- Mapper接口所在位置 -->
	<property name="basePackage" value="org.zgr.pack.dao"></property>
</bean>                                





<!-- 第一种:通过注解配置事务管理组件，下面的class类里封装了commit,rowback等事务提交和回滚。第二种看电脑记事本里有
            DataSourceTransactionManager这个类只适合MyBatis和JDBC,
            HibernateTransactionManager这个类适合Hibernate。
-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dbcp"></property>
    </bean>
    
<!-- 开启事务注解标记      标记是:@Transactional -->
    <!-- 当调用带有@Transactional标记的方法时，将id=txManager事务管理功能切入进去,有异常就回滚，没异常就commit(提交) 
          这里有一个新的解析空间"tx"，所以要看看此页最上面的那段中是否有"tx"标记，这里是有的。
          案例在service包下，UserServiceImpl.java里regist()方法有具体实现。
          
          也可以XML的方法来实现，那么下面这句话就去掉，换成电脑记事本里的那种。
    -->
    <tx:annotation-driven transaction-manager="txManager"/>
	
	
	
	

	
	
	
<!-- 第二种用注解的方式演示AOP示例。下面代码只是一个AOP例子 -->
	
	<!-- 开启AOP注解支持，这样它就支持：@Aspect,@通知标记.....等标记。 -->
	<aop:aspectj-autoproxy/>
	
	
	<!-- 对静态资源文件的访问 -->
	<mvc:resources mapping="/js/**" location="/js/" />
	<mvc:resources mapping="/upload/**" location="/upload/" />
	<mvc:resources mapping="/resources/**" location="/resources/" />
	<mvc:resources mapping="/css/**" location="/css/" />
	<mvc:resources mapping="/images/**" location="/images/" />
	<mvc:resources mapping="/img/**" location="/img/" />
	<mvc:resources mapping="/WEB-INF/**" location="/WEB-INF/" />
	
	
	
	
	
	 
	<context:property-placeholder location="classpath:redis-config.properties" />  

    <!-- 启用缓存注解功能，这个是必须的，否则注解不会生效，另外，该注解一定要声明在spring主配置文件中才会生效 -->  
    <cache:annotation-driven cache-manager="cacheManager" /> 
    
    <!-- spring自己的缓存管理器，这里定义了缓存位置名称 ，即注解中的value -->  
     <bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">  
         <property name="caches">  
            <set>  
                <!-- 这里可以配置多个redis -->
                <!-- <bean class="com.cn.util.RedisCache">  
                     <property name="redisTemplate" ref="redisTemplate" />  
                     <property name="name" value="default"/>  
                </bean> -->  
                <bean class="org.zgr.pack.util.RedisCache">  
                     <property name="redisTemplate" ref="redisTemplate" />  
                     <property name="name" value="common"/>  
                     <!-- common名称要在类或方法的注解中使用 -->
                </bean>
            </set>  
         </property>  
     </bean>  
    
     
    
     <!-- redis 相关配置 -->  
     <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
         <!-- 最大空闲连接数 -->  
         <property name="maxIdle" value="${redis.maxIdle}" />
         <!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 -->   
         <property name="maxWaitMillis" value="${redis.maxWait}" />  
         <!-- 在获取连接的时候检查有效性, 默认false -->
         <property name="testOnBorrow" value="${redis.testOnBorrow}" />  
     </bean>  

     <bean id="JedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"  
       p:host-name="${redis.host}" p:port="${redis.port}" p:password="${redis.pass}" p:pool-config-ref="poolConfig"/>  
  
     <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">  
         <property name="connectionFactory" ref="JedisConnectionFactory" />  
     </bean>  
    
     
	
	
	
	
</beans>


